build
	check all return paths for releasing buffers

	list of error conditions for every function
	errno, etc

	alter Makefile to just echo
		CC partition.o
		etc

	ifndef __USE_FILE_OFFSET64
	#ifdef __USE_LARGEFILE64
	extern int stat64 (__const char *__restrict __file,
	extern int fstat64 (int __fd, struct stat64 *__buf) __THROW __nonnull ((2));

	change
		int function (in_param, &out_param);
	to the less efficient, but clearer NO! -> more eff!
		output = function (in_param);

	get_fs_X -> get_fs_X_sb

	standardise some types StringVec, StringQ?

	define DISABLE_DEPRECATED

	X_DEPRECATED

	flag all the throwing functions

	C++11 start with for loops
		what else do I know?

	test everything on
		a 32-bit machine/vm
		big-endian arch

	delegate label to container get_prop(), get_prop_short()

gui
	remove all container knowledge from drawingarea?
		how???

	after each operation try to minimised the refresh
	(i.e. don't re-scan the whole system)

	asynchronously queue up all the actions needed to populate the screen
	leave ??? for the as-yet unread stuff
	or little clock icons?
	wait cursors embedded in the table?

	tooltips, context menus

	disable clipping regions onces tested and range-checked

	change all the gfx parameters to doubles
	if the backend is swapped for svg it will still look good
	could be used to save appearance

	drawingarea -- need custom cases for small partitions
	(down as small as 1px wide?)

	separate shapes out of drawing area
		is it possible to draw things without knowing what they are?

	adapt draw_grid_linear et al to fit into a partition frame

	code to spawn dot and display to show object diagrams live

cmdline
	subclass of loop_auto (i.e. user file)
	subclass of file_auto (i.e. existing loop device)

	theme needs observers

	segments don't store offset, don't maintain correct order
		likewise subvols, metadata
		order by "seg_start"

	derive protective partition/table -- how?
	declare fake (non-code) subtypes, e.g. protective partition

	Unknown usage => bytes_used == -1

	maximums
		lvm 1678 volumes -- metadata overflow
		gpt 128 volumes -- table full
		msdos 4 volumes -- table full
		msdos extended -- 60 logical partitions (64 for libparted)

	need variant for config options / theming

	#ifdef debug around dump_*()

	stripe size -> block_size
	if creating a filesystem, take block_size into account

	block size = sector size = extent size = stripe size
		one name for all

	can we build map without vgchange -ay?
		yes

	separation of privileges
		how?  what's the proper fedora way?

	rename VG to pool
	add snapshot to object hierarchy (esp for btrfs)

	pre-emptively create object (at first identification)
	then log and "delete this" if necessary
		probably not a great idea

	fs > partition size -- now what?
		what to do on errors?

	open "lvm:test_02" or device, or file ([X] Load dependencies (on open dialog))

	examine guestfs-browser
		virt-rescue
		supermin
		able to work on vm image files (raw, vmdk, cow, etc)
			vmware-vmblock-fuse?

	reduce reliance on command line tools -- use shared libraries where possible

	read-only
		command line option
		preferences option
		compile-time option

	should the volumegroup object keep a list of free segments?

	dot config()
		map<enum X, bool>
		enum of all members
		display only selected
	or
		get_all_fields()
		return a vector<enum> (sorted)

	Automatic dump functions (need variant type)
		container ctor
			handle = create_section ("Container");
			add_member (handle, "name", value_reference);
		disk ctor
			handle = create_section ("Disk");
			add_member (handle, "name", value_reference);
	Sections: map<name, members>
	members: vector<M>
	M struct <name, type, pointer>

	move members before functions in classes?

	replace
		buffer = (unsigned char*) malloc (bufsize);
		with vector<unsigned char>

	need a way of marking invalid objects
	it's probably one of these, but something doesn't make sense
	why bother?
	what can we do if it's broken?
	e.g. msdos partition table
		valid, empty
		valid, partial
		valid, full
		invalid

	fix gparted so it only needs (disk group rw privs)
	why does it need anything else?
	ioctls - which ones?  necessary?
		drive geometry
		without which what can't we do?

	find all the ioctl in fdisk, parted, gparted, etc

	accessor functions for members
	get_bytes_size/set_bytes_size
	get_size (int block_size /* = 1 (bytes) */
	set_size (int block_size /* = 1 (bytes) */
	set_used (int block_size /* = 1 (bytes) */
		this updates the free space?
	set_free ...
		this updates the used space?
	enum UNITS_BYTES, UNITS_SECTORS (dep on hardware), UNITS_BLOCKS, UNITS_CYLINDERS, UNITS_MEBIBYTES instead of a byte count?

	to find the lvm volumes I only need
		vgs + lvs
	pvs doesn't get me any info that I can't get from these two

	list everything that could throw an exception and put in handlers

	no localisation in the lib

	for partition move, only move the data (read the bitmap)

	need to be able to identify full, but unrecognisable boot partitions
		e.g. Windows hidden boot partitions

	container::read (buffer, size)
		does the right thing

	unique things? map<>
		disk
		uuid
		mount point
		volume group
		partition

	global maps
		x -> container
		uuid
		device
		name - multimap?
		mount point / mounted *below*
		fs type - multimap

	if we have object for empty spaces, we need rules for coalescing empty spaces
	empty != reserved, etc
	hard work

	list view
	gparted table fields
		0 Partition
		1 Filesystem
		2 Mount point
		3 Label
		4 Size
		5 Used
		6 Unused
		7 Flags

	have two modes: live and queued
	expert live mode make changes are you click on things
	novice queued mode, queues the changes, explains them and then waits for OK

	Container::add_child
		if bytes_size/bytes_used is < 0 don't alter them

	btrfs object for snapshots, subvolumes, etc
	same for other fs, defrag, fsck, etc

	reduce/isolate the amount of root-only things
	so that a normal user can run it on a loop device, or vm image
	without extra privs

	container::snapshot_create
	container::snapshot_revert
		recursively copies / reverts a container tree

	create copy ctors to create backup versions of container trees

	monitor the vg seq num to avoid unnecessary updates
	can we checksum the relevant regions of disks for other partition schemes
	on "refresh" we check the crc of the data region: save unnecessary updates
	can we use inotify to monitor a section of a file/device (ie the first 4K)?

	for redundant volumes have flags on the group object to determine which device to read from
	first, last, random, etc

	Using each disk/loop/file device/offset
		for each partition table probe
			read one sector and pass it to msdos, gpt, etc
			in liklihood order
		for each logical volume type: lvm, ldm, md, etc
		for each filesystem type: ext2,3,4, fat, ntfs, etc
			first probe the common ones and those that
			require the least disk reading

	at each level of probing there are three outcomes
		No: not my type, try someone else
		Yes: I've dealt with it, nothing more to do
		Yes: Probe my children

	copy lvm code to check for open file descriptors on exit?
		relevant?
		RAII?

	make sure we're using all the lvm fields we ask for
		not just lvm, all the commands

	as well as reading the filesystem magic, we should try to read the fs size
	and validate it against its container

	msdos::probe
	gpt::probe
		return a valid (populated) container
		offset a parent into which the object gets inserted, but also return the object

	bool container::verify()

	container.find (device) - recurses through children
	can give answers
		YES -> pointer
		NO -> does not exist
		DONT_KNOW -> ask someone else

	device and offset needed
	esp. for loop and segments

	do (fs|disk|part|etc) specific things

	lvm seq num store in VG, parent->get_seq_num

	empty partition objects can ask parents for actions

	change open -> fopen -> cout?

	give Container the ability to store user-supplied info
	(for the benefit of the gui)

	container::is_valid()
		do a sanity check on this object and all its children

	int container::preferred_alignment

	flags
		general container flags
			valid
			read-only
			etc
		container-type specific flags
			extended partition
			etc

	Container::read_data must be limited to block_size
	otherwise the data could span different locations

	minimum/maximum sizes for volumes, filesystems, etc

	put a sequence number in every object
	increment the seq num on any changes
	gfx object can check whether to update themselves
	changing an object invalidates all its children
	seq number of -1 => object is dead
	ref count, too

	shadow objects
		gfx_fs
		gfx_part
		etc
	derived from non-graphical objects?
		=> object factory

	undo action still increments sequence number

	all containers have sequence number
		only update gui if incremented
		zero/-1 => object deleted
		or
			zero: invalid (refresh data)
			-1:   dead
		how does "rescan" keep in sync?

	container public function get_children (enum TYPES)
		child
		space
		reserved

	change objects to be "filled" with a space object
	if add_child is called the space is either replaced
	or split around the child

	factor out gpt,msdos,etc code into
		libgpt
		libmsdos
		etc

	/sys/block/X/size

	get list of devices from /proc/partitions or blkid
		disk
		loop
		file
		net?
	don't need to probe these fundamental types

	vector<> container::get_free_space

	base class for container : just children & search methods?

	zlib crc adler32 on disk metadata as a sequence number
		no.  need SEQUENTIAL number as well
		need to ignore date/time fields
			then standard tests work repeatably

	"No Volume groups found"
	if pvs returns nothing, don't search for volumes groups or volumes

	identify protective partitions in the lib

	need classes for loop and extended
	they need to lie about devices and offsets

	getopt c++

	container children vector => set

	factor out partition naming function

	code only deals in bytes, display can scale to human where necessary

	track (leak.cpp?) all file open/close/mmap, etc

	leakdetect oversize buffer, DMZ 0xDD on delete (or only _delete_ on exit)

	leak -- collect stats: largest alloc, max alloc, etc
		count by object type?

	lvm_* get_seq_num -> redirect to lvm_group

	make FILE the top-level for loop device?
		loop could be a subset given:
			offset
			size

	cstdint
		u16 -> std::uint16_t

	declare functions 'const' if nec

	variable size audit

	#include audit

	#includes
	check I need them all
	include bare minimum gdk/gtk for speed
	eliminate #include <gtkmm.h>

	NULL -> nullptr

	enum -> enum class

	work out namespace

	container: have "is_a", any need for "isnt_a"?

	does r/o loop mounting a fs alter the last mounted time?
	if not I can keep track of the filesystem contents
		mount r/o loop
		get fs type
		get os type
		get file listing for root dir
		record last mounted time
	later when needing the data again
	if mounted time has changed, rescan fs
	if not used cached data

	/proc, proc-find function
	find device function look for (and check thoroughly) name, major, minor, type

	on a timer, keep track of
		list of lvm volumes, etc
			if one changes without our doing, refresh everything
		config option for frequency

