default theme has: colours, labels, icons -> DefaultTheme object?
	table = "/usr/share/icons/table.png"
who populates the default theme?  -- GuiApp?
	deriving => fine-grained custom colours, etc
need to be able to _revert_ to default theme

Menu - Theme
	Default -> object
	Zany -> load_file & icons, etc
	B&w  -> load_file & icons, etc

Missing icons, invalid colours, invalid options
	App.QueueMessages()
	App.Message() * n
	App.FlushQueue()
		Coalesce if titles are the same, e.g.
			Error reading theme files

config_file	table = "/usr/share/..."
		colour = "cyan"
		block.icon = "table"
theme		table -> pixbuf
		colour = RGBA
gfx_container	icon -> pixbuf
		colour = RGBA

if theme seqnum incremented => gfx_container.retheme()
if new theme, build new gfx_container tree then subst?

Objects - backup
	alter contents
	create
	delete
	move
	resize

Timestamp the timeline
	lose the changes from the last n minutes?
Follow the data/parts -> optimisations
	offer to reorder to save time?
Use volume redundancy info to save time
IBackup interface on Container
Pool of *all* versions of *all* objects, ref-counted
Operations queue (of IBackups)
Deque undo/*redo*! iterator keeps current state
Anything but redo trashes future states

delete item: add to pool, remove from parent
alter (contained): add to pool

backup -> serialize???

Variant
	int
	float
	string

set by type
get by type
coerce to type
	string, promoted type

ctor (def, copy, move, typed)
cast (int, float, string)
operator(=,<<)

If I'm only looking for Variant attrs - don't need get/set method
e.g. dot visitor
	get_parent
	get_attrs -> const vector<Variant>&
		valid while you have a ContainerPtr

find by name	not uniq
find by uuid	uniq to device (hopefully)

deque
	work commit		begin()
	now (redo exists)	iter
	now (no redo)		end()

Tasks
	resizefs 5GB to 15GB
		resize part
		resize luks
		resize lvmpv
		resize lvmvol
		resize ext4

ONE TRANSACTION (with sub transactions) in TimeLine

Dialog
/--------------------------------------\
|Pending Actions:                      |
+--------------------------------------+
|Description    | Command              |
+--------------------------------------+
|resizefs       | cryptsetup ...       |
|	part    |                      |
|	[luks]  |                      |
|	pv      |                      |
|	vol     |                      |
|	ext4    |                      |
\--------------------------------------/

[xyz] = highlight
select resizefs and it will display *all* the sub commands

Options:
	display
	handle
	container
	icon
	size (log|linear|fixed|min)
	label (interior)
	title (exterior)
Colours:
	border
	fill
	etc
	shading
Inheritance
	Class hierarchy

manage updates using backup mechanism to sync

segments
	lvm_group, lvm_table		sort by device name of table, offset n/a
	lvm_volume, lvm_partition	sort by offset within volume

add_segment
	group::pvs group->table
		metadata add_child	} add_segment?
		volume add_child	}

loop device relies on a disk+file
	point loop to Disk object, file object
	what does the file object do?
File's parents, Disk? FS?
Parent objects may not be part of our view
	user excluded

btrfs:
	one volume, multivolume
	raid0, raid1, raid10, raid5, raid6
		data, metadata
	no subvolumes, mant subvolumes
	no snapshots, many snapshots

gfx - multiple selection
	=> tristate (yes,no,parent)?
	select object => select children?
Selection menu option
	put a tickbox on every visible object
	does this work for keyboard, still?

if we don't read the superblock then CRC command output
optimiser plugin: scan action list & adjust it
variant
	double type
	void *
	CPtr
variant throw range/type/nothrow
file size option : human-comparable
	NO to 	1MB, 1GB
	YES to	1MB, 1024MB
document exception handling in comments and/or header
external (to container) iterator class (depth/breadth) first?
prefer make_shared over shared_ptr x (new Y)

uniq id for all throws cf log

order build and deps to maximumise disk cache

visitor: get_all -> flatten container tree -> vector

example code for fs, disk, table, etc example/

const shared ptr Any need?

move ctors -- am I initialising everything?  anything?

Can I X (resize)? -> ask parent for definitive answer

non-recursive ::probe?
	I've done something -- did it happen?

shrink fs in partition
	[X] fs
	[X] partition

create fs on disk -> auto create partition

test resize partition around mounted fs

action needs "advanced" section -- enable extra flags

try to default new partition table to that of existing tables

move friends to public, protected, private?
	doesn't *matter* which

gpart --id partition contents

smart pointer around FILE handles

drop case defaults -> checkall enums used

vector<string> add to variant
rename variant -> property

gui edit config -- ned to know default setting (tri-state)

config-tree of Variants?

before commit - offer all the actions to the plugins (e.g. resize partition => re-run grub-install)

On App close, ~Config -- ask "Save Settings?"

progress bar settings : Number of operations remaining, or Time remaining

parted magic - features?

smart base class create(), get_smart(), weak pointer to self

secret manager for passwords NO SWAP
	what other data? (persistant across refreshes)

FS content icon, e.g. Fedora logo with version number overlaid (or put in tooltip)

command wrapper class
	lvm base class
		lvm-1.2 -- tailored to this exact version
		lvm-2.0 -- ditto

display = "outline" -- just a thin line

drag'n'drop receiving areas:
	tick  = ok
	cog   = work required (e.g. resize)
	cross = no cannot put object here

dnd
	if slightly smaller than space, offer to resize to fit

"work in progress" theme -- all grey except active object(s) (red)

Utils:: namespace?

Offer to backup key structures before starting

Tool: encrypt fs *IN-PLACE*?  Possible?  luks header size?

test against GParted -- compare work command lines

vm image tool -- find (list) mountable drives & mount them (including swap)

inxi script -- data from where?

gfx plugin - pre/post render -- if pre returns false, stop

Display blocks, e.g. Graphical, TreeView, etc [^] [X] (new window, close) icons?

Ignore menu button while menu is active

check gparted bugzilla for ideas

menuitem tooltips

statusbar = tooltips info (disable latter?)

double click == default action => properties dialog

window title contains what?  dev name?

Document modified(*) for devices?  * at start of title

Help mode rather than many "Are you sure?" dialogs

help mode == use assistant / wizard dialogs

disable treeview during updates -- too hard to keep up-to-date

popup menu -- double click (default) action first in list

base ETA on number of sectors to be written
	wait 30s before giving ETA

Progress STOP button -- immediate action -- must be resumeable

How do I suspend/restart/stop spawned commands?

pick default theme colours from gnome palette?

move tooltip and popup menu code to window (dparted)

add keys to drawingarea: home, end, pageup, pagedown

export data as csv [X] include hidden parts

tree/list totals row (excluded from sort)

partition view, show free space amalgamated

Run external commands in C locale?  translate errors how?
	hijack command's message lookups?

store treepath in GfxContainer

tree option: display as path, i.e.
	sda/sda1/ext4/ext_label

what font (for labels) if I don't set one?

Ctrl-Q eventbox needs to encompass whole window (in case gfx isn't displayed)

Copy of all container info in gfx_container => safe after original container dies

View menu in dead gui regions

signal on theme object -- theme-changed

Plugin 'X' would like to know the password to device 'Y'
	Once, Always, Never, Disable plugin

Multi-tab actions: Overview, Commands, Description
	Save option

How do I spawn yelp?

Selection/Working theme signals "theme-changed" on every new state

View [X] tooltips or
	(*) off
	( ) simple
	( ) complex

Doxygen

Split window: gfx fixed, notebook for lists (internally scrolled)

check gui works in KDE, etc

signals on all gfx containers? "changed"

View refresh => drop all gfx containers and recreate
	DO NOT rescan disk

lvm create vol [X] raid5, etc
	list max internal sizes of options

move drawingarea protective table into table subclass/property

config show advanced options by default

align mmap to at least PAGE_SIZE (or block size)

plugin: staging area -- for plugins that aren't sufficiently tested

command line -- window geometry

luks icon-tab with key icon if "empty"
	how do I identify luks'ed partitions?

devel.txt list sudoers necessary for testing

show gv parse tree for all disk examples

unique application:
	new run => present old app
	new run => new window for old app

probe -- safe to move add_child up to add_level?

move pixbuf code into pixbuf.cpp?

status bar list:
	num of probes completed
	num of questions outstanding

tree expand all => new children are expanded
	is this already the default behaviour?

ETA easier to calculate if I read the bitmap
	(and estimate amound of data to read/write)

overlapping copy - do safe part first
	(green window of safety, user can cancel)

no data for ETA -- mean guess, or worst case?

compare ETA with actual timings => create weightings

plugin: fix Fedora boot

tool: input fs (or table), output binary bitmap + block size

run tasks in parallel (if on diff disks)

usermode-gtk for root perms
	consolehelper
	pam.d/dparted

what signals are sent to all when machine is shutdown / user logs out?

/etc/security/console.apps

/run/sudo/flatcap

config -- close what I've opened?
	e.g. luks, loops, mounts
	default: no

text app - readline

no device => /dev/null, /dev/zero

treeview, properties dialog
	need to be able to copy text values

mount manager includes swap
	fuser
	lsof
	what's using X on unmount

v short suffixes: K, M, G, T, etc

tool: set uuid on _any_ object to a test-specific number

view key (for gfx): colour key (just those types in use)
	[X] show all

app: cd / on startup
	(but maintain pointer to start dir)

to work on a partition -- clear it first:
	umount
	kill loop
	look for cmd's cwd
	lvm mounts
	md mounts
	luks mounts
	what else?

sudo command line option => prefix child commands
	NO why not just sudo dp
	separation of privs

config -- ignore_gaps < 50MiB options (per container setting?)

use btrfs-debug-tree to find subvols of fs without mounting

don't store passwords, store tokes (store in pw manager)

menu: show last dialog
	how?
	just log the info and response?

config disable "filesystem.xfs", etc (reduce clutter)
	still identify them, though?

copy & paste fs:
	[X] new UUID option
	[X] resize ?

cut & paste option EQUIV move
	paste special -> menu!

option -> pause/are you ready between applied actions

copy/cut symbol in gfx/tree to show user

copy/cut - extra gfx/treeview entry
	Menu: view/clipboard (extra top-level device)

Location bar: /dev/sda, /dev/sda1, ext4 (drop down tree?)

on creating a volume after {logical part, luks, lvm, etc}
	offer to create new $^
	offer to extend $^

main -q/--quit kill running instance (if possible)

main (remote) should display usage on error not main (host)

fs clean/dirty bool

Window::parse_geometry

theme directory to choose from

resize dialog: minimise, maximise (space used) buttons

table = [X] correct order -> sort, squash holes

none, invisible, transparent => #00000000, = empty?

props dialog: save button, copy button (to clipboard)

Misc:Alignment : sub_type ~= Reserved?

Tools menu, combine with plugins?

"category" theme -- match dot hierarchy

actions -- select siblings, etc

file/loop can be resized!

drawing area - chequer whole area? leave as segments?

on losetup -d => clear redundant partition devices

wipefs

can i copy mounted fs's by creating a snapshot?

How to i turn the received snapshot info a real fs?  Do I need to?

configure to ignore fs types UNLESS one's detected

treeiter on container?

shadow objects -- entire gui set of objs
	call all virtual methods on orig lib objects

bytes reserved will change if container::alignment is altered

expose all the above as properties, so the user doesn't need to perform calculations

gpt owns (msdos,partition) => shield

T50-55 protective -- need to discover lvm table

move partitions different distances from zero

T60-66 !protective, protective

T6* missing lvm tabframe

Fold partition + extended?

Icons
	Segment		Jigsaw piece
	Stripe		diagonally striped box
	Raid5		5 in box
	Raid10		10 in box
	Redundancy	+ in box or overlapping squares
	Mirror		Reflected object

"+" button in gfx view to highlight siblings?
	how to activate it from the keyboard?

gpt has children
	bool protective
		table object
		partition object

LVM 0xEE

LDM 0x42

What's the visual difference between
	Disk/LvmTable
	Disk/LvmTable/LvmGroup
	Disk/LvmTable/LvmGroup/LvmVolume

config - default options for all commands, e.g.
	options for mkfs.ext2
	options for lvs

be able to configure each command?

tests: get_next_free_md() function

Table::set_alignment

resize dialog "Usable space" option may need input from the filesystem
	i.e.  how much metadata do you have?
	ext4 and btrfs differ greatly in metadata size

turn parent_offset to child_offset (and move to parent)
	NO.  can't distinguish between
		external get_buffer
		child get_buffer

can i run zerofree on luks partitions?
	punch holes?

test - check refcounts before and after each visitor

hexdump object?  no, doesn't make sense, not reused
	properties: start, len, fold dupes, indent

container/table
	get_buffer_count()
	set_buffer(n)
	choose which raid image to use

request for users: think up test cases

menu: examine -> hex dump

zero object: test end of container, too

dot: msdos/extended: rank=same

action lvm -- view config (not properties)

lvm2 release -- when did _mlog become _meta?

plugin could change dot and prop flags of PPtrs

use property keywords internally and L10N to translate

don't unnecessarily name objects
	leave for name_default

reinstate default names of objects if there's no possibility
of the user naming them?

pathbar below menu (and on view menu)
	tie in to focus

if object is hidden children should inherit warnings?
	children might not be visible
	some parent is always visible

property date type
	input: string
	output: struct tm, or sec, usec

where should the catchs go
	low-level -- near the new
	high-level -- near the action that started it

props flags - advanced?

identify spelling in all config: colou?r, etc

option: treeview hide empty columns

list of tasks for others
	identify all other filesystems

derive own tree components & check lifetime, leakage

gfx output - run, expand, pipe to display

right-click on tree col head
	hide/show cols
	show -> list

store tree expanded state in gfx_cont

cols min_size, max_size

auto column type right align nums even if prop type = string

config I18N, title="hello", title_FR="bonjour"

csv output from treeview

ntfs short uuid

treeview config (hide zero/-1 values)

space slack -- unreachable space

drop shield, or make it work

only throw std::exceptions

-V --version / copyright info

--debug enable all logging (-DDEBUG)
--trace enable all tracing (-DTRACE)

astyle/indent options

X::create could fail -- check retval
	compiler pragma? no

"shouldn't happen" comments => explain what would have to have gone wrong

add_space/reserved how diff from add_child?

Unallocated -- account for every byte

hierarchy for btrfs, lvm snapshots, etc

props -- not yet implemented
	flags, mounts, warnings, volgroup, parent, whole, siblings

UUIDs check they're correct

probe vs create -- parent offset

filesystem::add_child move into each fs handler

dot -- sibling links to force order

config {} ignored

obj app -> q_add ask => App interface just for this stuff?

config/theme get_no_recursion, default value?

cryptsetup with no key => stderr! need to trap it
	add "2>&1" to all commands
	use more pipes

combine DP_FILE with _FILE_H_ etc
	simplifying #includes

SEEK_END -> block:: ?

check for use of, and find c++ ways
	min, max, abs, clamp, roundup, rounddown

expand assertions
	warn_if_reached
	warn_if_fail
	return_if_fail
	return_val_if_fail
	return_val_if_reached

rename XYZ_dialog to dlg_XYZ?

siblings
	lvmgroup members
	btrfs subvols

model invalidate => gui refresh -- HOW?

move all throw-y stuff from ctor to create?

Menu: View/Show all -- override theme's hiding rules

dupe theme config -> crash

question.h default dialog responses

log_error and above => backtrace in dlg box (advanced tab)

log_gui?
log_model?
gui_tree, gui_area, etc

usage colour determined per container by theme plugin
	ext2 > 80% => red

FAT label trim trailing whitespace

Config listener (there'll be a lot of these)

Which commands can I *REALLY* undo?
If I preserve the old metadata/superblocks, etc
Partition delete/undelete - easy
Entire partition table delete/undelete - easy
Overwrite fs with same type of fs - medium
Overwrite fs with different fs - hard

recursive listeners

timeline - singleton?
	or multiple objects pointing to
	one master object

If there's two timelines, back() needs to cause events
that will be correcly  interpreted by another timeline
(and ignored by itself).

sigc:: -> std::bind?

Time Stretcher:
	A way to scale down the speed of the app
	(in realistic amounts)
	Time how long a function/thread/etc lasts
	Multiply by a compile/config time factor
	Sleep before adding container and returning

Timeline:
	Can't swap out top-level
	top-level can only add_child/remove_child -- nothing else
	how to turn on/off recording?
	start_recording() returns a timeline ptr
		int recording++
	end_recording() returns a timeline ptr
		int recording--
	start_recording (container)
		*creates* a timeline
	timeline is a listener of container

menu info cached in gui
if it changes, container_changed()
needs recursive listener

commands need list of prerequisites/constraints
i.e. I expect Container of size X, with Y children.
If these constraints fail, stop processing.
Leave redo-buffer intact, just in case.
User might allow modified commands.

Need to notify on delete (e.g. children of deleted containers)
e.g. Properties dialog -- could disappear:
	Ask: Do nothing? Close?
		[X] Remember my decision

Each task can only alter the data of *ONE* container.
Many containers (children) may still be added/removed in one stroke.

Scope
	data is app-level
	theme is app-level (for now; could be window-level)
	focus is window-level
		things within the window are in sync
		things in other windows are not

	App::set_data()
	App::set_theme()
	Window::set_focus()

	Each window has:
		it's own gfx tree which could be themed differently
		it's own selection of toolbar/area/tree/undobar/pending/status sections

Luks
	Dialog -> Busy (which prevents what?)
	Cancel -> Done
	OK -> Probe, open, notification
	What does this need to lock (if anything)?

Listeners
	treeview each row listens to a container
	area listens to top-level recursively
	property dialog listens to one container
	timeline listens to top-level recursively

Questions may need more context info
	Question: "Enter passphrase for /dev/sda1"
	Context: "/dev/sda1 is a LUKS encrypted partition"

Busy column in treeview
Busy hourglass in area
	to show working

Testing
	trap keys (window level) to increase/decrease the fill
	of the filesystems => notifications => gfx update

Action:
	delete X - delete X and all its children
	empty X  - delete only X's children

Farm out into shared libraries:
	all disk identification
		quick (weak check), e.g. magic
		thorough validation, e.g. checksums
	all non-trivial commands, e.g.
		delete partition
		create partition
	write wrappers around libraries
	make sure all actions in dparted can be duplicated simply on the command line

List of commands to be executed can be saved and then run (using dparted/cli) as a script
	#!/usr/sbin/dparted --script

class Container
{
protected:
	std::uint8_t* save_metadata();
}

run cli tools, but re-route writes, e.g.
	mke2fs /dev/sda1
but intercept all the writes to disk (LD_PRELOAD)
and save the overwritten data to a sparse file
allows us to undo dangerous commands

quota info
	how do I find it?
	how do I display it?

Mustn't keep mounted/removeable disks mmap'd
don't interfere with the user

password manager should lock memory
so should anyone USING a password (any variables)
then they should scrub the memory before unlocking

filesystem actions:
	empty, tidy, clean
	what would they do?
	what might be useful to do?

start_thread/end_thread
	global thread_count++/--
	display count at exit (if != 1)

how do I handle updates from background processes?  e.g.
	filesystem free space has changed
	disk mounted
Just set the values and notify?
	needs write lock
	only change/notify if the value's changed

double notifications:
	ok for drawing area
	bad for tree view

table discover:
	after validating partitions
	1 notification for all parts

will container::unique_id be needed in release version?

change theme to use css

bg cron tasks, e.g. check free space
	try_lock_for (n secs)
then give up.  updating later will be ok
n = cron period / 4 ?

theme - fs fill - multiple levels
	low usage - green
	med usage - amber
	high usage - red

what do I do with the pending changes when I detect external changes?
how do i detect external changes?
how often do I poll?

some properties, e.g. fs usage should be preserved across backup/restore

should I disallow actions on mounted drives?
yes, at least until I can find/kill all users, e.g.
	mount, cwd, processes, etc

swap needs to be a real object
needs to know about being mounted & getting swap usage

multiple runs of dparted make the tree view have duplicate columns

put a wrapper around thread locking
	log_thread
	timestamp
	see where threads lock up

replace all lock() with try_lock_for
	get out clause if something goes wrong
	log_code?
	log_error?

properties dialog
	if object goes away, change the title to
		X at [TIME]
		X deleted at [TIME]
	what if undo brings it back?
	dialog option
		[X] do not update (if being used for reference purposes)
			turn off listener?
			listen but don't change?
	use weak pointers

When user commits changes to disk
	Each object should validate itself against the disk

when fs is unmounted, we should remember our accurate "usage"

How do I keep background task data in sync when I'm undo/redoing?
	Mounted FS (20% full)
	Action new label
		FS shows 20% full
	externally create big file
	bg task updates free space
		FS shows 80% full
	undo label
		FS shows 20% full	WRONG
	this can be sidestepped if the "disk usage" were a child of the fs

background tasks
	checking for free space on mounted partitions/swap
		is it ever worth checking UNmounted partitions?
		just leave that to a manual refresh?
	check for new sub-volumes (btrfs)
	need non-user txn (like initial discovery)
	usb un/mounted
	add/del loop device

where do i fit in the fscks between txns?
	do they appear in the timeline?

does everything need to be within a transaction?
	either that, or I trap all setter methods

declare "volatile" properties
	always keep newest value (even if undoing an action)
	listeners too

